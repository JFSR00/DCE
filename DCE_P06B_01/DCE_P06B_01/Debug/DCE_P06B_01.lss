
DCE_P06B_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000025a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000982  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000078d  00000000  00000000  00000cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000488  00000000  00000000  00001483  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  0000190c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e1  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d8  00000000  00000000  00001e79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002051  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  88:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initADC>:
 */ 

#include "adc.h"

inline void initADC(){
	ADMUX = 0x40;	// Usamos AVCC, ADLAR = 0 y usamos ADC0
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = 0xc7;	// Habilitamos el ADC, realizamos primera lectura, configuramos
  96:	87 ec       	ldi	r24, 0xC7	; 199
  98:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  9c:	08 95       	ret

0000009e <readADCInt>:
					// el divisor de reloj a 128
}

inline void readADCInt(uint8_t input){
	ADMUX = 0x40 | (input & 0x0f);	// Usamos AVCC, ADLAR = 0, usamos ADCn especificado por el parámetro
  9e:	8f 70       	andi	r24, 0x0F	; 15
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA |= (1<<ADSC);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <enableADCInt>:
}

inline void enableADCInt(){
	ADCSRA |= (1<<ADIE);
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <disableADCInt>:
}

inline void disableADCInt(){
	ADCSRA &= ~(1<<ADIE);
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <__vector_11>:

void config_ports();

volatile uint16_t res;

ISR(TIMER1_COMPA_vect){
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	enableADCInt();
  ec:	0e 94 59 00 	call	0xb2	; 0xb2 <enableADCInt>
	readADCInt(1);
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 4f 00 	call	0x9e	; 0x9e <readADCInt>
}
  f6:	ff 91       	pop	r31
  f8:	ef 91       	pop	r30
  fa:	bf 91       	pop	r27
  fc:	af 91       	pop	r26
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	7f 91       	pop	r23
 104:	6f 91       	pop	r22
 106:	5f 91       	pop	r21
 108:	4f 91       	pop	r20
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <__vector_21>:

ISR(ADC_vect){
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	2f 93       	push	r18
 124:	3f 93       	push	r19
 126:	4f 93       	push	r20
 128:	5f 93       	push	r21
 12a:	6f 93       	push	r22
 12c:	7f 93       	push	r23
 12e:	8f 93       	push	r24
 130:	9f 93       	push	r25
 132:	af 93       	push	r26
 134:	bf 93       	push	r27
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	disableADCInt();
 13a:	0e 94 5f 00 	call	0xbe	; 0xbe <disableADCInt>
	res = ADC;
 13e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 142:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 146:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 14a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <config_ports>:
	}
}

void config_ports(){
	//set PD6 as output
	DDRB |= (1<<PORTB1) | (1<<PORTB5);	// Connect led to pin PB1/OC1A
 170:	84 b1       	in	r24, 0x04	; 4
 172:	82 62       	ori	r24, 0x22	; 34
 174:	84 b9       	out	0x04, r24	; 4
 176:	08 95       	ret

00000178 <main>:
	disableADCInt();
	res = ADC;
}

int main(void){
	config_ports();
 178:	0e 94 b8 00 	call	0x170	; 0x170 <config_ports>
	initADC();
 17c:	0e 94 48 00 	call	0x90	; 0x90 <initADC>
	
	TMR1_CTC_irq();
 180:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <TMR1_CTC_irq>
	TMR1_CTC_set(7812);
 184:	84 e8       	ldi	r24, 0x84	; 132
 186:	9e e1       	ldi	r25, 0x1E	; 30
 188:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <TMR1_CTC_set>
	//TMR1_CTC_set(31249);
	TMR1_CTC_start();
 18c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <TMR1_CTC_start>
	
	sei();
 190:	78 94       	sei
	while(1){
		if(res >= 512){
 192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 196:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 19a:	81 15       	cp	r24, r1
 19c:	92 40       	sbci	r25, 0x02	; 2
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <main+0x2c>
			PORTB |= (1 << PORTB5);
 1a0:	2d 9a       	sbi	0x05, 5	; 5
 1a2:	f7 cf       	rjmp	.-18     	; 0x192 <main+0x1a>
		}else{
			PORTB &= ~(1 << PORTB5);
 1a4:	2d 98       	cbi	0x05, 5	; 5
 1a6:	f5 cf       	rjmp	.-22     	; 0x192 <main+0x1a>

000001a8 <TMR1_CTC_irq>:
 */ 

#include "TMR1.h"

void TMR1_CTC_irq(){
	TCCR1A |= (1<<COM1A0);	// Toggle OC1A on Compare Match.
 1a8:	e0 e8       	ldi	r30, 0x80	; 128
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	80 64       	ori	r24, 0x40	; 64
 1b0:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);	// ModeCTC on OCR1A
 1b2:	e1 e8       	ldi	r30, 0x81	; 129
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	88 60       	ori	r24, 0x08	; 8
 1ba:	80 83       	st	Z, r24
	// set prescaler to 1024 and start the timer
	TCCR1B |= (1<<CS02) | (1<<CS00);
 1bc:	80 81       	ld	r24, Z
 1be:	85 60       	ori	r24, 0x05	; 5
 1c0:	80 83       	st	Z, r24
 1c2:	08 95       	ret

000001c4 <TMR1_CTC_set>:
}

void TMR1_CTC_set(uint16_t value){
	TCNT1 = 0;		// Initialize counter
 1c4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 1c8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	OCR1A = value;	// Set number of ticks to reach the time
 1cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 1d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 1d4:	08 95       	ret

000001d6 <TMR1_CTC_start>:
}

void TMR1_CTC_start(){
	TIMSK1 |= (1 << OCIE1A);
 1d6:	ef e6       	ldi	r30, 0x6F	; 111
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	82 60       	ori	r24, 0x02	; 2
 1de:	80 83       	st	Z, r24
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
