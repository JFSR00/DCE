
DCE_P05_04.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a90  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000706  00000000  00000000  00000e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043b  00000000  00000000  0000150a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fc  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000348  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000020d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  88:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:

typedef enum {NORMAL = 0, NOCHE} Modos;

volatile Modos modo, sig_modo;

ISR(INT0_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	modo = sig_modo;
  9c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <modo>
}
  a4:	8f 91       	pop	r24
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <main>:

int main(){
	//-----------Local variables --------------------------
	modo = NORMAL;
  b0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <modo>
	sig_modo = NOCHE;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

//-----------Functions--------------------------

static inline void initPorts(){
	// Configuracion de los LEDs
	DDRB |= (1<<PORTB0) | (1<<PORTB5);
  ba:	94 b1       	in	r25, 0x04	; 4
  bc:	91 62       	ori	r25, 0x21	; 33
  be:	94 b9       	out	0x04, r25	; 4
	PORTB &= ~((1<<PORTB0)|(1<<PORTB5));
  c0:	95 b1       	in	r25, 0x05	; 5
  c2:	9e 7d       	andi	r25, 0xDE	; 222
  c4:	95 b9       	out	0x05, r25	; 5
	// Configuracion del pulsador
	DDRD &= ~(1<<PORTD2);
  c6:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PORTD2);
  c8:	5a 9a       	sbi	0x0b, 2	; 11
}

static inline void initINT0(){
	EICRA|=(1<<ISC01);	// INT0-Falling edge
  ca:	e9 e6       	ldi	r30, 0x69	; 105
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	90 81       	ld	r25, Z
  d0:	92 60       	ori	r25, 0x02	; 2
  d2:	90 83       	st	Z, r25
	EIMSK|=(1<<INT0);	// Enable INT0;
  d4:	e8 9a       	sbi	0x1d, 0	; 29
}

static inline void initADC(){
	ADMUX = 0x40;		// Usamos AVCC, ADLAR = 0 y usamos ADC0
  d6:	90 e4       	ldi	r25, 0x40	; 64
  d8:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = 0x97;		// Habilitamos el ADC, deshabilitamos interrupciones, configuramos el divisor de reloj a 128
  dc:	97 e9       	ldi	r25, 0x97	; 151
  de:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	//-----------SETUP-------------------------------------
	initPorts();
	initINT0();
	initADC();
	sei();
  e2:	78 94       	sei

	return ADC;									// Devolvemos el resultado de la lectura del ADC
}

static inline void blink(){
	PORTB = 0x01;		// Encendemos LED por 300ms
  e4:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	35 ea       	ldi	r19, 0xA5	; 165
  ea:	9e e0       	ldi	r25, 0x0E	; 14
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	30 40       	sbci	r19, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x3c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x46>
  f6:	00 00       	nop
	_delay_ms(300);
	PORTB = 0x00;		// Apagamos LED por 300ms
  f8:	15 b8       	out	0x05, r1	; 5
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	35 ea       	ldi	r19, 0xA5	; 165
  fe:	9e e0       	ldi	r25, 0x0E	; 14
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x50>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x5a>
 10a:	00 00       	nop
	_delay_ms(300);
	PORTB = 0x01;		// Encendemos LED por 300ms
 10c:	85 b9       	out	0x05, r24	; 5
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	35 ea       	ldi	r19, 0xA5	; 165
 112:	9e e0       	ldi	r25, 0x0E	; 14
 114:	21 50       	subi	r18, 0x01	; 1
 116:	30 40       	sbci	r19, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x64>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x6e>
 11e:	00 00       	nop
	_delay_ms(300);
	PORTB = 0x00;		// Apagamos LED por 300ms
 120:	15 b8       	out	0x05, r1	; 5
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	35 ea       	ldi	r19, 0xA5	; 165
 126:	9e e0       	ldi	r25, 0x0E	; 14
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	30 40       	sbci	r19, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x78>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x82>
 132:	00 00       	nop
	_delay_ms(300);
	PORTB = 0x01;		// Encendemos LED por 300ms
 134:	85 b9       	out	0x05, r24	; 5
 136:	2f ef       	ldi	r18, 0xFF	; 255
 138:	35 ea       	ldi	r19, 0xA5	; 165
 13a:	8e e0       	ldi	r24, 0x0E	; 14
 13c:	21 50       	subi	r18, 0x01	; 1
 13e:	30 40       	sbci	r19, 0x00	; 0
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x8c>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x96>
 146:	00 00       	nop
}

static inline uint16_t funADC(uint8_t input){
	cli();										// Deshabilitamos las interrupciones para esta función

	ADMUX = (ADMUX & 0xf0) | (input & 0x0f);	// Configuramos el multiplexor de ADC para leer el puerto pasado por
 148:	ac e7       	ldi	r26, 0x7C	; 124
 14a:	b0 e0       	ldi	r27, 0x00	; 0
	ADCSRA |= (1<<ADSC);						// parámetro y comenzamos la lectura poniendo a 1 el flag ADSC
 14c:	ea e7       	ldi	r30, 0x7A	; 122
 14e:	f0 e0       	ldi	r31, 0x00	; 0
	while(!(ADCSRA & (1 << ADIF))){}			// Esperamos a que finalice la lectura de ADC leyendo el flag ADIF
	ADCSRA |= (1 << ADIF);						// Borramos el flag ADIF escribiendo un 1 sobre él

	sei();										// Reactivamos las interrupciones para el resto del programa

	return ADC;									// Devolvemos el resultado de la lectura del ADC
 150:	c8 e7       	ldi	r28, 0x78	; 120
 152:	d0 e0       	ldi	r29, 0x00	; 0
	//-----------LOOP-------------------------------------
	while(1){
		switch(modo){
			case NORMAL:
				normal();
				sig_modo = NOCHE;
 154:	91 e0       	ldi	r25, 0x01	; 1

	blink();

	//-----------LOOP-------------------------------------
	while(1){
		switch(modo){
 156:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <modo>
 15a:	88 23       	and	r24, r24
 15c:	19 f0       	breq	.+6      	; 0x164 <main+0xb4>
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	e1 f0       	breq	.+56     	; 0x19a <main+0xea>
 162:	4c c0       	rjmp	.+152    	; 0x1fc <main+0x14c>
	_delay_ms(300);

}

static inline void normal(){
	PORTB |= (1 << PORTB5);
 164:	2d 9a       	sbi	0x05, 5	; 5
	ADMUX = 0x40;		// Usamos AVCC, ADLAR = 0 y usamos ADC0
	ADCSRA = 0x97;		// Habilitamos el ADC, deshabilitamos interrupciones, configuramos el divisor de reloj a 128
}

static inline uint16_t funADC(uint8_t input){
	cli();										// Deshabilitamos las interrupciones para esta función
 166:	f8 94       	cli

	ADMUX = (ADMUX & 0xf0) | (input & 0x0f);	// Configuramos el multiplexor de ADC para leer el puerto pasado por
 168:	8c 91       	ld	r24, X
 16a:	80 7f       	andi	r24, 0xF0	; 240
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);						// parámetro y comenzamos la lectura poniendo a 1 el flag ADSC
 170:	80 81       	ld	r24, Z
 172:	80 64       	ori	r24, 0x40	; 64
 174:	80 83       	st	Z, r24

	while(!(ADCSRA & (1 << ADIF))){}			// Esperamos a que finalice la lectura de ADC leyendo el flag ADIF
 176:	80 81       	ld	r24, Z
 178:	84 ff       	sbrs	r24, 4
 17a:	fd cf       	rjmp	.-6      	; 0x176 <main+0xc6>
	ADCSRA |= (1 << ADIF);						// Borramos el flag ADIF escribiendo un 1 sobre él
 17c:	80 81       	ld	r24, Z
 17e:	80 61       	ori	r24, 0x10	; 16
 180:	80 83       	st	Z, r24

	sei();										// Reactivamos las interrupciones para el resto del programa
 182:	78 94       	sei

	return ADC;									// Devolvemos el resultado de la lectura del ADC
 184:	28 81       	ld	r18, Y
 186:	39 81       	ldd	r19, Y+1	; 0x01

}

static inline void normal(){
	PORTB |= (1 << PORTB5);
	if(funADC(ADC_POT) >= POT_POINT){
 188:	2c 32       	cpi	r18, 0x2C	; 44
 18a:	31 40       	sbci	r19, 0x01	; 1
 18c:	10 f0       	brcs	.+4      	; 0x192 <main+0xe2>
		PORTB |= 0x01;
 18e:	28 9a       	sbi	0x05, 0	; 5
 190:	01 c0       	rjmp	.+2      	; 0x194 <main+0xe4>
	}else{
		PORTB &= 0xfe;
 192:	28 98       	cbi	0x05, 0	; 5
	//-----------LOOP-------------------------------------
	while(1){
		switch(modo){
			case NORMAL:
				normal();
				sig_modo = NOCHE;
 194:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
				break;
 198:	de cf       	rjmp	.-68     	; 0x156 <main+0xa6>
	ADMUX = 0x40;		// Usamos AVCC, ADLAR = 0 y usamos ADC0
	ADCSRA = 0x97;		// Habilitamos el ADC, deshabilitamos interrupciones, configuramos el divisor de reloj a 128
}

static inline uint16_t funADC(uint8_t input){
	cli();										// Deshabilitamos las interrupciones para esta función
 19a:	f8 94       	cli

	ADMUX = (ADMUX & 0xf0) | (input & 0x0f);	// Configuramos el multiplexor de ADC para leer el puerto pasado por
 19c:	8c 91       	ld	r24, X
 19e:	80 7f       	andi	r24, 0xF0	; 240
 1a0:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);						// parámetro y comenzamos la lectura poniendo a 1 el flag ADSC
 1a2:	80 81       	ld	r24, Z
 1a4:	80 64       	ori	r24, 0x40	; 64
 1a6:	80 83       	st	Z, r24

	while(!(ADCSRA & (1 << ADIF))){}			// Esperamos a que finalice la lectura de ADC leyendo el flag ADIF
 1a8:	80 81       	ld	r24, Z
 1aa:	84 ff       	sbrs	r24, 4
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <main+0xf8>
	ADCSRA |= (1 << ADIF);						// Borramos el flag ADIF escribiendo un 1 sobre él
 1ae:	80 81       	ld	r24, Z
 1b0:	80 61       	ori	r24, 0x10	; 16
 1b2:	80 83       	st	Z, r24

	sei();										// Reactivamos las interrupciones para el resto del programa
 1b4:	78 94       	sei

	return ADC;									// Devolvemos el resultado de la lectura del ADC
 1b6:	28 81       	ld	r18, Y
 1b8:	39 81       	ldd	r19, Y+1	; 0x01
		PORTB &= 0xfe;
	}
}

static inline void night(){
	if(funADC(ADC_LDR) <= LDR_POINT){
 1ba:	29 35       	cpi	r18, 0x59	; 89
 1bc:	32 40       	sbci	r19, 0x02	; 2
 1be:	18 f4       	brcc	.+6      	; 0x1c6 <main+0x116>
		PORTB |= 0x01;
 1c0:	28 9a       	sbi	0x05, 0	; 5
		PORTB &= ~(1 << PORTB5);
 1c2:	2d 98       	cbi	0x05, 5	; 5
 1c4:	18 c0       	rjmp	.+48     	; 0x1f6 <main+0x146>
	_delay_ms(300);

}

static inline void normal(){
	PORTB |= (1 << PORTB5);
 1c6:	2d 9a       	sbi	0x05, 5	; 5
	ADMUX = 0x40;		// Usamos AVCC, ADLAR = 0 y usamos ADC0
	ADCSRA = 0x97;		// Habilitamos el ADC, deshabilitamos interrupciones, configuramos el divisor de reloj a 128
}

static inline uint16_t funADC(uint8_t input){
	cli();										// Deshabilitamos las interrupciones para esta función
 1c8:	f8 94       	cli

	ADMUX = (ADMUX & 0xf0) | (input & 0x0f);	// Configuramos el multiplexor de ADC para leer el puerto pasado por
 1ca:	8c 91       	ld	r24, X
 1cc:	80 7f       	andi	r24, 0xF0	; 240
 1ce:	81 60       	ori	r24, 0x01	; 1
 1d0:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADSC);						// parámetro y comenzamos la lectura poniendo a 1 el flag ADSC
 1d2:	80 81       	ld	r24, Z
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	80 83       	st	Z, r24

	while(!(ADCSRA & (1 << ADIF))){}			// Esperamos a que finalice la lectura de ADC leyendo el flag ADIF
 1d8:	80 81       	ld	r24, Z
 1da:	84 ff       	sbrs	r24, 4
 1dc:	fd cf       	rjmp	.-6      	; 0x1d8 <main+0x128>
	ADCSRA |= (1 << ADIF);						// Borramos el flag ADIF escribiendo un 1 sobre él
 1de:	80 81       	ld	r24, Z
 1e0:	80 61       	ori	r24, 0x10	; 16
 1e2:	80 83       	st	Z, r24

	sei();										// Reactivamos las interrupciones para el resto del programa
 1e4:	78 94       	sei

	return ADC;									// Devolvemos el resultado de la lectura del ADC
 1e6:	28 81       	ld	r18, Y
 1e8:	39 81       	ldd	r19, Y+1	; 0x01

}

static inline void normal(){
	PORTB |= (1 << PORTB5);
	if(funADC(ADC_POT) >= POT_POINT){
 1ea:	2c 32       	cpi	r18, 0x2C	; 44
 1ec:	31 40       	sbci	r19, 0x01	; 1
 1ee:	10 f0       	brcs	.+4      	; 0x1f4 <main+0x144>
		PORTB |= 0x01;
 1f0:	28 9a       	sbi	0x05, 0	; 5
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <main+0x146>
	}else{
		PORTB &= 0xfe;
 1f4:	28 98       	cbi	0x05, 0	; 5
				normal();
				sig_modo = NOCHE;
				break;
			case NOCHE:
				night();
				sig_modo = NORMAL;
 1f6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
				break;
 1fa:	ad cf       	rjmp	.-166    	; 0x156 <main+0xa6>

	return ADC;									// Devolvemos el resultado de la lectura del ADC
}

static inline void blink(){
	PORTB = 0x01;		// Encendemos LED por 300ms
 1fc:	95 b9       	out	0x05, r25	; 5
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	35 ea       	ldi	r19, 0xA5	; 165
 202:	8e e0       	ldi	r24, 0x0E	; 14
 204:	21 50       	subi	r18, 0x01	; 1
 206:	30 40       	sbci	r19, 0x00	; 0
 208:	80 40       	sbci	r24, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <main+0x154>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <main+0x15e>
 20e:	00 00       	nop
	_delay_ms(300);
	PORTB = 0x00;		// Apagamos LED por 300ms
 210:	15 b8       	out	0x05, r1	; 5
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	35 ea       	ldi	r19, 0xA5	; 165
 216:	8e e0       	ldi	r24, 0x0E	; 14
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	30 40       	sbci	r19, 0x00	; 0
 21c:	80 40       	sbci	r24, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x168>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x172>
 222:	00 00       	nop
	_delay_ms(300);
	PORTB = 0x01;		// Encendemos LED por 300ms
 224:	95 b9       	out	0x05, r25	; 5
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	35 ea       	ldi	r19, 0xA5	; 165
 22a:	8e e0       	ldi	r24, 0x0E	; 14
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	30 40       	sbci	r19, 0x00	; 0
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <main+0x17c>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x186>
 236:	00 00       	nop
	_delay_ms(300);
	PORTB = 0x00;		// Apagamos LED por 300ms
 238:	15 b8       	out	0x05, r1	; 5
 23a:	2f ef       	ldi	r18, 0xFF	; 255
 23c:	35 ea       	ldi	r19, 0xA5	; 165
 23e:	8e e0       	ldi	r24, 0x0E	; 14
 240:	21 50       	subi	r18, 0x01	; 1
 242:	30 40       	sbci	r19, 0x00	; 0
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x190>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x19a>
 24a:	00 00       	nop
	_delay_ms(300);
	PORTB = 0x01;		// Encendemos LED por 300ms
 24c:	95 b9       	out	0x05, r25	; 5
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	35 ea       	ldi	r19, 0xA5	; 165
 252:	8e e0       	ldi	r24, 0x0E	; 14
 254:	21 50       	subi	r18, 0x01	; 1
 256:	30 40       	sbci	r19, 0x00	; 0
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x1a4>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x1ae>
 25e:	00 00       	nop
 260:	7a cf       	rjmp	.-268    	; 0x156 <main+0xa6>

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
