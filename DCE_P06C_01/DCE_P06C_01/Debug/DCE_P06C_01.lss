
DCE_P06C_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f7  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071e  00000000  00000000  000009db  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fa  00000000  00000000  000010f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000013f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c3  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000052  00000000  00000000  0000182b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initPorts>:
}

void initPorts(){
	//set OC0A/PD6 and OC0B/PD5 as output
	//DDRD |= (1<<PORTD6) | (1<<PORTD5);	// Ej 1
	DDRD |= (1<<PORTD5);	// Ej 2
  80:	55 9a       	sbi	0x0a, 5	; 10
  82:	08 95       	ret

00000084 <InitTimer0>:
}

void InitTimer0(void){
	TCNT0 = 0;	//Set Initial Timer value
  84:	16 bc       	out	0x26, r1	; 38
	//Pahse correct PWM mode and clear OC0A and OC0B on compare match
	TCCR0A |= (1<<COM0B1) | (1<<COM0A1) | (1<<WGM02) | (1<<WGM00);
  86:	84 b5       	in	r24, 0x24	; 36
  88:	89 6a       	ori	r24, 0xA9	; 169
  8a:	84 bd       	out	0x24, r24	; 36
  8c:	08 95       	ret

0000008e <StartTimer0>:
}

void StartTimer0(void){
	//Set prescaler 64 and start timer (F_PWM= 488z)
	//TCCR0B |= (1<<CS01) | (1<<CS00);	// Ej 1
	TCCR0B |= (1<<CS10);	// Ej 2
  8e:	85 b5       	in	r24, 0x25	; 37
  90:	81 60       	ori	r24, 0x01	; 1
  92:	85 bd       	out	0x25, r24	; 37
  94:	08 95       	ret

00000096 <main>:

int main(void){
	uint8_t dc = 128;
	uint8_t dir = 1;

	initPorts();
  96:	0e 94 40 00 	call	0x80	; 0x80 <initPorts>
	InitTimer0();
  9a:	0e 94 42 00 	call	0x84	; 0x84 <InitTimer0>
	//setDutyCycleOC0A(178);	// Ej 1
	//setDutyCycleOC0B(89);	// Ej 1
	StartTimer0();
  9e:	0e 94 47 00 	call	0x8e	; 0x8e <StartTimer0>
void setDutyCycleOC0A(uint8_t);
void setDutyCycleOC0B(uint8_t);

int main(void){
	uint8_t dc = 128;
	uint8_t dir = 1;
  a2:	91 e0       	ldi	r25, 0x01	; 1
void StartTimer0(void);
void setDutyCycleOC0A(uint8_t);
void setDutyCycleOC0B(uint8_t);

int main(void){
	uint8_t dc = 128;
  a4:	80 e8       	ldi	r24, 0x80	; 128
			dc++;
		}else{
			dc--;
		}
		if(dc == 255 || dc == 0){
			dir = !dir;
  a6:	31 e0       	ldi	r19, 0x01	; 1
  a8:	40 e0       	ldi	r20, 0x00	; 0
void setDutyCycleOC0A(uint8_t dc){
	OCR0A = dc;	//Compare value (Duty Cycle = 70%)
}

void setDutyCycleOC0B(uint8_t dc){
	OCR0B = dc;	//Compare value (Duty Cycle = 70%)
  aa:	88 bd       	out	0x28, r24	; 40
	//setDutyCycleOC0A(178);	// Ej 1
	//setDutyCycleOC0B(89);	// Ej 1
	StartTimer0();
	while(1){
		setDutyCycleOC0B(dc);
		if(dir){
  ac:	99 23       	and	r25, r25
  ae:	11 f0       	breq	.+4      	; 0xb4 <main+0x1e>
			dc++;
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <main+0x20>
		}else{
			dc--;
  b4:	81 50       	subi	r24, 0x01	; 1
		}
		if(dc == 255 || dc == 0){
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	28 0f       	add	r18, r24
  ba:	2e 3f       	cpi	r18, 0xFE	; 254
  bc:	20 f0       	brcs	.+8      	; 0xc6 <main+0x30>
			dir = !dir;
  be:	23 2f       	mov	r18, r19
  c0:	91 11       	cpse	r25, r1
  c2:	24 2f       	mov	r18, r20
  c4:	92 2f       	mov	r25, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	ef e3       	ldi	r30, 0x3F	; 63
  c8:	fc e9       	ldi	r31, 0x9C	; 156
  ca:	31 97       	sbiw	r30, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <main+0x34>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x3a>
  d0:	00 00       	nop
  d2:	eb cf       	rjmp	.-42     	; 0xaa <main+0x14>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
