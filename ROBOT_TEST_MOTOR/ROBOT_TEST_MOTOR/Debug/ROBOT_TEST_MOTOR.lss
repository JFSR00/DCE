
ROBOT_TEST_MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000280  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000114c  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c25  00000000  00000000  00001530  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d9  00000000  00000000  00002155  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00002730  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d1  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000051e  00000000  00000000  00002e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  bc:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <main>:
void setDutyCycleMotorR(uint8_t);

int main(void){
	uint8_t dc = 0, dc2 = 255, dir = 1;

	motor_init();
  c4:	0e 94 be 00 	call	0x17c	; 0x17c <motor_init>
	
	motor_forward(255);
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	0e 94 1e 01 	call	0x23c	; 0x23c <motor_forward>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	87 ea       	ldi	r24, 0xA7	; 167
  d2:	91 e6       	ldi	r25, 0x61	; 97
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x10>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x1a>
  de:	00 00       	nop
	_delay_ms(2000);
	motor_backward(255);
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	0e 94 2b 01 	call	0x256	; 0x256 <motor_backward>
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	87 ea       	ldi	r24, 0xA7	; 167
  ea:	91 e6       	ldi	r25, 0x61	; 97
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x32>
  f6:	00 00       	nop
	_delay_ms(2000);
	motor_turnLeft(255, FORWARD);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <motor_turnLeft>
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	87 ea       	ldi	r24, 0xA7	; 167
 104:	91 e6       	ldi	r25, 0x61	; 97
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x42>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x4c>
 110:	00 00       	nop
	_delay_ms(2000);
	motor_turnLeft(255, BACKWARD);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <motor_turnLeft>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	87 ea       	ldi	r24, 0xA7	; 167
 11e:	91 e6       	ldi	r25, 0x61	; 97
 120:	21 50       	subi	r18, 0x01	; 1
 122:	80 40       	sbci	r24, 0x00	; 0
 124:	90 40       	sbci	r25, 0x00	; 0
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x5c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x66>
 12a:	00 00       	nop
	_delay_ms(2000);
	motor_turnRigth(255, FORWARD);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	0e 94 01 01 	call	0x202	; 0x202 <motor_turnRigth>
 134:	2f ef       	ldi	r18, 0xFF	; 255
 136:	87 ea       	ldi	r24, 0xA7	; 167
 138:	91 e6       	ldi	r25, 0x61	; 97
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <main+0x76>
 142:	00 c0       	rjmp	.+0      	; 0x144 <main+0x80>
 144:	00 00       	nop
	_delay_ms(2000);
	motor_turnRigth(255, BACKWARD);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	0e 94 01 01 	call	0x202	; 0x202 <motor_turnRigth>
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	87 ea       	ldi	r24, 0xA7	; 167
 152:	91 e6       	ldi	r25, 0x61	; 97
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x90>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x9a>
 15e:	00 00       	nop
	_delay_ms(2000);
	motor_stop();
 160:	0e 94 38 01 	call	0x270	; 0x270 <motor_stop>
 164:	ff cf       	rjmp	.-2      	; 0x164 <main+0xa0>

00000166 <motor_setDirection>:
	OCR4A = ~spd_l;
	OCR4D = spd_r;
}

void motor_setDirection(uint8_t dir){
	switch(dir){
 166:	88 23       	and	r24, r24
 168:	19 f0       	breq	.+6      	; 0x170 <motor_setDirection+0xa>
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	21 f0       	breq	.+8      	; 0x176 <motor_setDirection+0x10>
 16e:	08 95       	ret
		case BACKWARD:
			PORTD |= (1<<PORTD6);
 170:	5e 9a       	sbi	0x0b, 6	; 11
			PORTE |= (1<<PORTE6);
 172:	76 9a       	sbi	0x0e, 6	; 14
			break;
 174:	08 95       	ret
		case FORWARD:
			PORTD &= ~(1<<PORTD6);
 176:	5e 98       	cbi	0x0b, 6	; 11
			PORTE &= ~(1<<PORTE6);
 178:	76 98       	cbi	0x0e, 6	; 14
 17a:	08 95       	ret

0000017c <motor_init>:
#include <avr/io.h>
#include "motors.h"

void motor_init(){
	// ---------------| Ports configuration |----------------------
	DDRC |= (1<<PORTC6);				// PWM1		Pin 31	PC6 (OC3A/OC4A(Negado))
 17c:	3e 9a       	sbi	0x07, 6	; 7
	DDRD |= (1<<PORTD7)|(1<<PORTD6);	// EN1		Pin 26	PD6 (T1/OC4D(Negado)/ADC9)
 17e:	8a b1       	in	r24, 0x0a	; 10
 180:	80 6c       	ori	r24, 0xC0	; 192
 182:	8a b9       	out	0x0a, r24	; 10
										// PWM2	Pin 27	PD7 (T0/OC4D/ADC10)
	DDRE |= (1<<PORTE6);				// EN2		Pin 1	PE6 (INT6/AIN0)
 184:	6e 9a       	sbi	0x0d, 6	; 13
	
	// ---------------| Timer 4 configuration |----------------------
	TCNT4 = 0;	//Set Initial Timer value
 186:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <__DATA_REGION_ORIGIN__+0x5f>
 18a:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <__DATA_REGION_ORIGIN__+0x5e>
	//Phase correct PWM mode and clear OC4A and OC4D on compare match
	TCCR4A |= (1<<COM4A0) | (1<<PWM4A);
 18e:	e0 ec       	ldi	r30, 0xC0	; 192
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	82 64       	ori	r24, 0x42	; 66
 196:	80 83       	st	Z, r24
	TCCR4C |= (1<<COM4D1) | (1<<PWM4D);
 198:	e2 ec       	ldi	r30, 0xC2	; 194
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	89 60       	ori	r24, 0x09	; 9
 1a0:	80 83       	st	Z, r24
	TCCR4D |= (1<<WGM40);
 1a2:	e3 ec       	ldi	r30, 0xC3	; 195
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	81 60       	ori	r24, 0x01	; 1
 1aa:	80 83       	st	Z, r24
	TCCR4B |= (1<<CS42)|(1<<CS41)|(1<<CS40);	// Starts the timer and sets the prescaler at 64
 1ac:	e1 ec       	ldi	r30, 0xC1	; 193
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	87 60       	ori	r24, 0x07	; 7
 1b4:	80 83       	st	Z, r24
	motor_setDirection(BACKWARD);
	motor_setVelocity(spd, spd);
}

void motor_setVelocity(uint8_t spd_l, uint8_t spd_r){
	OCR4A = ~spd_l;
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
	OCR4D = spd_r;
 1bc:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
	TCCR4D |= (1<<WGM40);
	TCCR4B |= (1<<CS42)|(1<<CS41)|(1<<CS40);	// Starts the timer and sets the prescaler at 64
	
	// ---------------| Motors initialize |----------------------
	motor_setVelocity(0, 0);
	motor_setDirection(FORWARD);
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	0e 94 b3 00 	call	0x166	; 0x166 <motor_setDirection>
 1c6:	08 95       	ret

000001c8 <motor_turnLeft>:
}

void motor_turnLeft(uint8_t spd, uint8_t dir){
 1c8:	cf 93       	push	r28
 1ca:	c8 2f       	mov	r28, r24
	switch(dir){
 1cc:	66 23       	and	r22, r22
 1ce:	69 f0       	breq	.+26     	; 0x1ea <motor_turnLeft+0x22>
 1d0:	61 30       	cpi	r22, 0x01	; 1
 1d2:	a9 f4       	brne	.+42     	; 0x1fe <motor_turnLeft+0x36>
		case FORWARD:
			motor_setDirection(FORWARD);
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	0e 94 b3 00 	call	0x166	; 0x166 <motor_setDirection>
			motor_setVelocity(spd, spd>>1);
 1da:	8c 2f       	mov	r24, r28
 1dc:	86 95       	lsr	r24
	motor_setDirection(BACKWARD);
	motor_setVelocity(spd, spd);
}

void motor_setVelocity(uint8_t spd_l, uint8_t spd_r){
	OCR4A = ~spd_l;
 1de:	c0 95       	com	r28
 1e0:	c0 93 cf 00 	sts	0x00CF, r28	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
	OCR4D = spd_r;
 1e4:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
 1e8:	0a c0       	rjmp	.+20     	; 0x1fe <motor_turnLeft+0x36>
		case FORWARD:
			motor_setDirection(FORWARD);
			motor_setVelocity(spd, spd>>1);
			break;
		case BACKWARD:
			motor_setDirection(BACKWARD);
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	0e 94 b3 00 	call	0x166	; 0x166 <motor_setDirection>
	motor_setDirection(BACKWARD);
	motor_setVelocity(spd, spd);
}

void motor_setVelocity(uint8_t spd_l, uint8_t spd_r){
	OCR4A = ~spd_l;
 1f0:	8c 2f       	mov	r24, r28
 1f2:	86 95       	lsr	r24
 1f4:	80 95       	com	r24
 1f6:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
	OCR4D = spd_r;
 1fa:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		case BACKWARD:
			motor_setDirection(BACKWARD);
			motor_setVelocity(spd>>1, spd);
			break;
	}
}
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <motor_turnRigth>:

void motor_turnRigth(uint8_t spd, uint8_t dir){
 202:	cf 93       	push	r28
 204:	c8 2f       	mov	r28, r24
	switch(dir){
 206:	66 23       	and	r22, r22
 208:	69 f0       	breq	.+26     	; 0x224 <motor_turnRigth+0x22>
 20a:	61 30       	cpi	r22, 0x01	; 1
 20c:	a9 f4       	brne	.+42     	; 0x238 <motor_turnRigth+0x36>
		case FORWARD:
			motor_setDirection(FORWARD);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	0e 94 b3 00 	call	0x166	; 0x166 <motor_setDirection>
	motor_setDirection(BACKWARD);
	motor_setVelocity(spd, spd);
}

void motor_setVelocity(uint8_t spd_l, uint8_t spd_r){
	OCR4A = ~spd_l;
 214:	8c 2f       	mov	r24, r28
 216:	86 95       	lsr	r24
 218:	80 95       	com	r24
 21a:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
	OCR4D = spd_r;
 21e:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
 222:	0a c0       	rjmp	.+20     	; 0x238 <motor_turnRigth+0x36>
		case FORWARD:
			motor_setDirection(FORWARD);
			motor_setVelocity(spd>>1, spd);
			break;
		case BACKWARD:
			motor_setDirection(BACKWARD);
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	0e 94 b3 00 	call	0x166	; 0x166 <motor_setDirection>
			motor_setVelocity(spd, spd>>1);
 22a:	8c 2f       	mov	r24, r28
 22c:	86 95       	lsr	r24
	motor_setDirection(BACKWARD);
	motor_setVelocity(spd, spd);
}

void motor_setVelocity(uint8_t spd_l, uint8_t spd_r){
	OCR4A = ~spd_l;
 22e:	c0 95       	com	r28
 230:	c0 93 cf 00 	sts	0x00CF, r28	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
	OCR4D = spd_r;
 234:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
		case BACKWARD:
			motor_setDirection(BACKWARD);
			motor_setVelocity(spd, spd>>1);
			break;
	}
}
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <motor_forward>:

void motor_forward(uint8_t spd){
 23c:	cf 93       	push	r28
 23e:	c8 2f       	mov	r28, r24
	motor_setDirection(FORWARD);
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 b3 00 	call	0x166	; 0x166 <motor_setDirection>
	motor_setDirection(BACKWARD);
	motor_setVelocity(spd, spd);
}

void motor_setVelocity(uint8_t spd_l, uint8_t spd_r){
	OCR4A = ~spd_l;
 246:	8c 2f       	mov	r24, r28
 248:	80 95       	com	r24
 24a:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
	OCR4D = spd_r;
 24e:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
}

void motor_forward(uint8_t spd){
	motor_setDirection(FORWARD);
	motor_setVelocity(spd, spd);
}
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <motor_backward>:

void motor_backward(uint8_t spd){
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
	motor_setDirection(BACKWARD);
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 b3 00 	call	0x166	; 0x166 <motor_setDirection>
	motor_setVelocity(spd, spd);
}

void motor_setVelocity(uint8_t spd_l, uint8_t spd_r){
	OCR4A = ~spd_l;
 260:	8c 2f       	mov	r24, r28
 262:	80 95       	com	r24
 264:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
	OCR4D = spd_r;
 268:	c0 93 d2 00 	sts	0x00D2, r28	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
}

void motor_backward(uint8_t spd){
	motor_setDirection(BACKWARD);
	motor_setVelocity(spd, spd);
}
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <motor_stop>:

void motor_setVelocity(uint8_t spd_l, uint8_t spd_r){
	OCR4A = ~spd_l;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	80 93 cf 00 	sts	0x00CF, r24	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
	OCR4D = spd_r;
 276:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__DATA_REGION_ORIGIN__+0x72>
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
