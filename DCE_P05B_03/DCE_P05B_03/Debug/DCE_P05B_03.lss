
DCE_P05B_03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  0000027e  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c5e  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008cd  00000000  00000000  000010b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000055b  00000000  00000000  00001983  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00001ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000442  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000405  00000000  00000000  0000244a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000284f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 35       	cpi	r26, 0x5E	; 94
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6d 00 	call	0xda	; 0xda <main>
  8e:	0c 94 3d 01 	jmp	0x27a	; 0x27a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initADC>:
	ADCSRA = 0xcf;	// Habilitamos el ADC, activamos interrupciones, configuramos
	// el divisor de reloj a 128
}

inline void readADC(){
	ADCSRA |= (1<<ADSC);
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  9c:	8f ec       	ldi	r24, 0xCF	; 207
  9e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  a2:	08 95       	ret

000000a4 <funADC>:
}

inline uint16_t funADC(uint8_t input) {	// Por motivos aun desconocidos, esta función no funciona
	ADMUX = 0x00;					// Reseteamos los registros del ADC
  a4:	ac e7       	ldi	r26, 0x7C	; 124
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	1c 92       	st	X, r1
	ADCSRA = 0x00;
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1

	ADMUX = 0x40 | (input & 0x0f);	// Usamos AVCC, ADLAR = 0, usamos ADCn especificado por el parámetro
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	8c 93       	st	X, r24
	ADCSRA = 0x87;					// Habilitamos el ADC, configuramos el divisor de reloj a 128
  b6:	87 e8       	ldi	r24, 0x87	; 135
  b8:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC);			// Iniciamos lectura de ADC
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	while(!(ADCSRA&(1<<ADIF)));		// Esperamos hasta que termine la lectura del ADC
  c0:	80 81       	ld	r24, Z
  c2:	84 ff       	sbrs	r24, 4
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <funADC+0x1c>
	ADCSRA |= (1<<ADIF);			// Limpiamos el flag de fin de lectura
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	80 83       	st	Z, r24

	return ADC;
  d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  d8:	08 95       	ret

000000da <main>:

static inline void initPorts();	// Función de inicialización de puertos
static inline uint16_t readADC_8samples(uint8_t port);

int main(void)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <main+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x8>
  e2:	1f 92       	push	r1
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
	}
}

static inline void initPorts(){
	// Configuracion de los LEDs
	DDRB |= (1<<PORTB0) | (1<<PORTB5);
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	81 62       	ori	r24, 0x21	; 33
  ec:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<PORTB0)|(1<<PORTB5));
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8e 7d       	andi	r24, 0xDE	; 222
  f2:	85 b9       	out	0x05, r24	; 5
	// Configuracion del pulsador
	DDRD &= ~(1<<PORTD2);
  f4:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PORTD2);
  f6:	5a 9a       	sbi	0x0b, 2	; 11
{
	uint8_t buff[5];
	uint8_t opt;
	
	initPorts();
	initADC();
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <initADC>
	USART_Init(MYUBRR);
  fc:	87 e6       	ldi	r24, 0x67	; 103
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <USART_Init>
	
	USART_TransmitStr("1.-Measure of the LDR\n\r2.-Measure of the potentiometer\n\rOption: ");
 104:	8c e1       	ldi	r24, 0x1C	; 28
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 04 01 	call	0x208	; 0x208 <USART_TransmitStr>
	
	while(1){
		if(UCSR0A & (1<<RXC0)){		// Comprobamos si hay algún caracter por leer, de esta manera no bloqueamos el funcionamiento del microcontrolador
 10c:	00 ec       	ldi	r16, 0xC0	; 192
 10e:	10 e0       	ldi	r17, 0x00	; 0
			opt = UDR0;				// Leemos el dato recibido
 110:	0f 2e       	mov	r0, r31
 112:	f6 ec       	ldi	r31, 0xC6	; 198
 114:	af 2e       	mov	r10, r31
 116:	b1 2c       	mov	r11, r1
 118:	f0 2d       	mov	r31, r0
	USART_Init(MYUBRR);
	
	USART_TransmitStr("1.-Measure of the LDR\n\r2.-Measure of the potentiometer\n\rOption: ");
	
	while(1){
		if(UCSR0A & (1<<RXC0)){		// Comprobamos si hay algún caracter por leer, de esta manera no bloqueamos el funcionamiento del microcontrolador
 11a:	f8 01       	movw	r30, r16
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	e4 f7       	brge	.-8      	; 0x11a <main+0x40>
			opt = UDR0;				// Leemos el dato recibido
 122:	f5 01       	movw	r30, r10
 124:	f0 80       	ld	r15, Z
			
			USART_TransmitStr("\n\n\rReading: ");
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	0e 94 04 01 	call	0x208	; 0x208 <USART_TransmitStr>
			
			switch(opt){
 12e:	f1 e3       	ldi	r31, 0x31	; 49
 130:	ff 16       	cp	r15, r31
 132:	21 f0       	breq	.+8      	; 0x13c <main+0x62>
 134:	82 e3       	ldi	r24, 0x32	; 50
 136:	f8 16       	cp	r15, r24
 138:	f9 f0       	breq	.+62     	; 0x178 <main+0x9e>
 13a:	3c c0       	rjmp	.+120    	; 0x1b4 <main+0xda>

static inline uint16_t readADC_8samples(uint8_t port){
	uint16_t media = 0;
	uint8_t i;
	
	funADC(port);
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	0e 94 52 00 	call	0xa4	; 0xa4 <funADC>
 142:	68 94       	set
 144:	ff 24       	eor	r15, r15
 146:	f3 f8       	bld	r15, 3
	DDRD &= ~(1<<PORTD2);
	PORTD |= (1<<PORTD2);
}

static inline uint16_t readADC_8samples(uint8_t port){
	uint16_t media = 0;
 148:	c1 2c       	mov	r12, r1
 14a:	d1 2c       	mov	r13, r1
	uint8_t i;
	
	funADC(port);
	
	for(i = 0; i < 8; i++){
		media += funADC(port);
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 52 00 	call	0xa4	; 0xa4 <funADC>
 152:	c8 0e       	add	r12, r24
 154:	d9 1e       	adc	r13, r25
 156:	fa 94       	dec	r15
	uint16_t media = 0;
	uint8_t i;
	
	funADC(port);
	
	for(i = 0; i < 8; i++){
 158:	f1 10       	cpse	r15, r1
 15a:	f8 cf       	rjmp	.-16     	; 0x14c <main+0x72>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 15c:	4a e0       	ldi	r20, 0x0A	; 10
 15e:	be 01       	movw	r22, r28
 160:	6f 5f       	subi	r22, 0xFF	; 255
 162:	7f 4f       	sbci	r23, 0xFF	; 255
 164:	c6 01       	movw	r24, r12
 166:	96 95       	lsr	r25
 168:	87 95       	ror	r24
 16a:	96 95       	lsr	r25
 16c:	87 95       	ror	r24
 16e:	96 95       	lsr	r25
 170:	87 95       	ror	r24
 172:	0e 94 13 01 	call	0x226	; 0x226 <__utoa_ncheck>
 176:	23 c0       	rjmp	.+70     	; 0x1be <main+0xe4>

static inline uint16_t readADC_8samples(uint8_t port){
	uint16_t media = 0;
	uint8_t i;
	
	funADC(port);
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 52 00 	call	0xa4	; 0xa4 <funADC>
 17e:	68 94       	set
 180:	ff 24       	eor	r15, r15
 182:	f3 f8       	bld	r15, 3
	DDRD &= ~(1<<PORTD2);
	PORTD |= (1<<PORTD2);
}

static inline uint16_t readADC_8samples(uint8_t port){
	uint16_t media = 0;
 184:	c1 2c       	mov	r12, r1
 186:	d1 2c       	mov	r13, r1
	uint8_t i;
	
	funADC(port);
	
	for(i = 0; i < 8; i++){
		media += funADC(port);
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 52 00 	call	0xa4	; 0xa4 <funADC>
 18e:	c8 0e       	add	r12, r24
 190:	d9 1e       	adc	r13, r25
 192:	fa 94       	dec	r15
	uint16_t media = 0;
	uint8_t i;
	
	funADC(port);
	
	for(i = 0; i < 8; i++){
 194:	f1 10       	cpse	r15, r1
 196:	f8 cf       	rjmp	.-16     	; 0x188 <main+0xae>
 198:	4a e0       	ldi	r20, 0x0A	; 10
 19a:	be 01       	movw	r22, r28
 19c:	6f 5f       	subi	r22, 0xFF	; 255
 19e:	7f 4f       	sbci	r23, 0xFF	; 255
 1a0:	c6 01       	movw	r24, r12
 1a2:	96 95       	lsr	r25
 1a4:	87 95       	ror	r24
 1a6:	96 95       	lsr	r25
 1a8:	87 95       	ror	r24
 1aa:	96 95       	lsr	r25
 1ac:	87 95       	ror	r24
 1ae:	0e 94 13 01 	call	0x226	; 0x226 <__utoa_ncheck>
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <main+0xe4>
					break;
				case '2':
					utoa(readADC_8samples(ADC_POT), (char*)buff, 10);
					break;
				default:
					buff[0] = 0x00;
 1b4:	19 82       	std	Y+1, r1	; 0x01
					USART_TransmitStr("\rWrong key!");
 1b6:	8d e0       	ldi	r24, 0x0D	; 13
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	0e 94 04 01 	call	0x208	; 0x208 <USART_TransmitStr>
				break;
			}
			
			USART_TransmitStr((char*)buff);
 1be:	ce 01       	movw	r24, r28
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	0e 94 04 01 	call	0x208	; 0x208 <USART_TransmitStr>
			USART_TransmitStr("\n\n\r1.-Measure of the LDR\n\r2.-Measure of the potentiometer\n\rOption: ");
 1c6:	89 e1       	ldi	r24, 0x19	; 25
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 04 01 	call	0x208	; 0x208 <USART_TransmitStr>
 1ce:	a5 cf       	rjmp	.-182    	; 0x11a <main+0x40>

000001d0 <USART_Init>:
	while(size){
		USART_Transmit_Char(*data);
		data++;
		size--;
	}
}
 1d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 1d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 1d8:	e0 ec       	ldi	r30, 0xC0	; 192
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	8d 7f       	andi	r24, 0xFD	; 253
 1e0:	80 83       	st	Z, r24
 1e2:	e1 ec       	ldi	r30, 0xC1	; 193
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	88 61       	ori	r24, 0x18	; 24
 1ea:	80 83       	st	Z, r24
 1ec:	e2 ec       	ldi	r30, 0xC2	; 194
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	86 60       	ori	r24, 0x06	; 6
 1f4:	80 83       	st	Z, r24
 1f6:	08 95       	ret

000001f8 <USART_Transmit_Char>:
 1f8:	e0 ec       	ldi	r30, 0xC0	; 192
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	90 81       	ld	r25, Z
 1fe:	95 ff       	sbrs	r25, 5
 200:	fd cf       	rjmp	.-6      	; 0x1fc <USART_Transmit_Char+0x4>
 202:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 206:	08 95       	ret

00000208 <USART_TransmitStr>:

void USART_TransmitStr(char *str){
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
	while(*str){
 20e:	88 81       	ld	r24, Y
 210:	88 23       	and	r24, r24
 212:	31 f0       	breq	.+12     	; 0x220 <USART_TransmitStr+0x18>
 214:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit_Char((uint8_t)*str);
 216:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <USART_Transmit_Char>
		size--;
	}
}

void USART_TransmitStr(char *str){
	while(*str){
 21a:	89 91       	ld	r24, Y+
 21c:	81 11       	cpse	r24, r1
 21e:	fb cf       	rjmp	.-10     	; 0x216 <USART_TransmitStr+0xe>
		USART_Transmit_Char((uint8_t)*str);
		str++;
	}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <__utoa_ncheck>:
 226:	bb 27       	eor	r27, r27

00000228 <__utoa_common>:
 228:	fb 01       	movw	r30, r22
 22a:	55 27       	eor	r21, r21
 22c:	aa 27       	eor	r26, r26
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	aa 1f       	adc	r26, r26
 234:	a4 17       	cp	r26, r20
 236:	10 f0       	brcs	.+4      	; 0x23c <__utoa_common+0x14>
 238:	a4 1b       	sub	r26, r20
 23a:	83 95       	inc	r24
 23c:	50 51       	subi	r21, 0x10	; 16
 23e:	b9 f7       	brne	.-18     	; 0x22e <__utoa_common+0x6>
 240:	a0 5d       	subi	r26, 0xD0	; 208
 242:	aa 33       	cpi	r26, 0x3A	; 58
 244:	08 f0       	brcs	.+2      	; 0x248 <__utoa_common+0x20>
 246:	a9 5d       	subi	r26, 0xD9	; 217
 248:	a1 93       	st	Z+, r26
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	79 f7       	brne	.-34     	; 0x22c <__utoa_common+0x4>
 24e:	b1 11       	cpse	r27, r1
 250:	b1 93       	st	Z+, r27
 252:	11 92       	st	Z+, r1
 254:	cb 01       	movw	r24, r22
 256:	0c 94 2d 01 	jmp	0x25a	; 0x25a <strrev>

0000025a <strrev>:
 25a:	dc 01       	movw	r26, r24
 25c:	fc 01       	movw	r30, r24
 25e:	67 2f       	mov	r22, r23
 260:	71 91       	ld	r23, Z+
 262:	77 23       	and	r23, r23
 264:	e1 f7       	brne	.-8      	; 0x25e <strrev+0x4>
 266:	32 97       	sbiw	r30, 0x02	; 2
 268:	04 c0       	rjmp	.+8      	; 0x272 <strrev+0x18>
 26a:	7c 91       	ld	r23, X
 26c:	6d 93       	st	X+, r22
 26e:	70 83       	st	Z, r23
 270:	62 91       	ld	r22, -Z
 272:	ae 17       	cp	r26, r30
 274:	bf 07       	cpc	r27, r31
 276:	c8 f3       	brcs	.-14     	; 0x26a <strrev+0x10>
 278:	08 95       	ret

0000027a <_exit>:
 27a:	f8 94       	cli

0000027c <__stop_program>:
 27c:	ff cf       	rjmp	.-2      	; 0x27c <__stop_program>
