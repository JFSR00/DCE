
DCE_P06C_03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000089a  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000756  00000000  00000000  00000ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d1  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000063  00000000  00000000  00001aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001b05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initADC>:
	ADCSRA |= (1<<ADSC);			// Iniciamos lectura de ADC
	while(!(ADCSRA&(1<<ADIF)));		// Esperamos hasta que termine la lectura del ADC
	ADCSRA |= (1<<ADIF);			// Limpiamos el flag de fin de lectura

	return ADC;
}
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  86:	87 ec       	ldi	r24, 0xC7	; 199
  88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  8c:	08 95       	ret

0000008e <readADC>:

inline uint16_t readADC(uint8_t input) {	// Por motivos aun desconocidos, esta función no funciona
	ADMUX |= (input & 0x0f);	// Usamos ADCn especificado por el parámetro
  8e:	ec e7       	ldi	r30, 0x7C	; 124
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	90 81       	ld	r25, Z
  94:	8f 70       	andi	r24, 0x0F	; 15
  96:	98 2b       	or	r25, r24
  98:	90 83       	st	Z, r25

	ADCSRA |= (1<<ADSC);			// Iniciamos lectura de ADC
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	80 83       	st	Z, r24
	while(!(ADCSRA&(1<<ADIF)));		// Esperamos hasta que termine la lectura del ADC
  a4:	80 81       	ld	r24, Z
  a6:	84 ff       	sbrs	r24, 4
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <readADC+0x16>
	ADCSRA |= (1<<ADIF);			// Limpiamos el flag de fin de lectura
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	80 83       	st	Z, r24

	return ADC;
  b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  b8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  bc:	08 95       	ret

000000be <initPorts>:
	}
}

void initPorts(){
	//set OC0A/PD6 and OC0B/PD5 as output
	DDRD |= (1<<PORTD5);
  be:	55 9a       	sbi	0x0a, 5	; 10
  c0:	08 95       	ret

000000c2 <InitTimer0>:
}

void InitTimer0(void){
	TCNT0 = 0;	//Set Initial Timer value
  c2:	16 bc       	out	0x26, r1	; 38
	//Pahse correct PWM mode and clear OC0A and OC0B on compare match
	TCCR0A |= (1<<COM0B1) | (1<<COM0A1) | (1<<WGM02) | (1<<WGM00);
  c4:	84 b5       	in	r24, 0x24	; 36
  c6:	89 6a       	ori	r24, 0xA9	; 169
  c8:	84 bd       	out	0x24, r24	; 36
  ca:	08 95       	ret

000000cc <StartTimer0>:
}

void StartTimer0(void){
	//Set prescaler 64 and start timer (F_PWM= 488z)
	TCCR0B |= (1<<CS10);
  cc:	85 b5       	in	r24, 0x25	; 37
  ce:	81 60       	ori	r24, 0x01	; 1
  d0:	85 bd       	out	0x25, r24	; 37
  d2:	08 95       	ret

000000d4 <main>:
void InitTimer0(void);
void StartTimer0(void);
void setDutyCycleOC0B(uint8_t);

int main(void){
	initADC();
  d4:	0e 94 40 00 	call	0x80	; 0x80 <initADC>

	initPorts();
  d8:	0e 94 5f 00 	call	0xbe	; 0xbe <initPorts>
	InitTimer0();
  dc:	0e 94 61 00 	call	0xc2	; 0xc2 <InitTimer0>
	StartTimer0();
  e0:	0e 94 66 00 	call	0xcc	; 0xcc <StartTimer0>

	while(1){
		setDutyCycleOC0B(readADC(1) >> 2);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 47 00 	call	0x8e	; 0x8e <readADC>
  ea:	96 95       	lsr	r25
  ec:	87 95       	ror	r24
  ee:	96 95       	lsr	r25
  f0:	87 95       	ror	r24
	//Set prescaler 64 and start timer (F_PWM= 488z)
	TCCR0B |= (1<<CS10);
}

void setDutyCycleOC0B(uint8_t dc){
	OCR0B = dc;	//Compare value (Duty Cycle = 70%)
  f2:	88 bd       	out	0x28, r24	; 40
  f4:	f7 cf       	rjmp	.-18     	; 0xe4 <main+0x10>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
