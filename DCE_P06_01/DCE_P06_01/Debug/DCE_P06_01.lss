
DCE_P06_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000178  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e5  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000642  00000000  00000000  00000905  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000258  00000000  00000000  00000f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  000011a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000363  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000156b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  88:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:

#include <avr/io.h>
#include <avr/interrupt.h>


ISR(TIMER0_OVF_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	static uint8_t tot_overflow = 0;
	if(tot_overflow>2){
  9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a2:	83 30       	cpi	r24, 0x03	; 3
  a4:	38 f0       	brcs	.+14     	; 0xb4 <__vector_16+0x24>
		PORTB^=(1<<PORTB2);	// toggles the led
  a6:	95 b1       	in	r25, 0x05	; 5
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	89 27       	eor	r24, r25
  ac:	85 b9       	out	0x05, r24	; 5
		tot_overflow=0;
  ae:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  b2:	0d c0       	rjmp	.+26     	; 0xce <__vector_16+0x3e>
	}else if(tot_overflow==0){
  b4:	81 11       	cpse	r24, r1
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <__vector_16+0x38>
		TCNT0=27;			//after 67 clk -> overflow/irq
  b8:	8b e1       	ldi	r24, 0x1B	; 27
  ba:	86 bd       	out	0x26, r24	; 38
		tot_overflow++;
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  c6:	03 c0       	rjmp	.+6      	; 0xce <__vector_16+0x3e>
	}else{
		tot_overflow++;
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
	//PORTB^=(1<<PORTB2);	// toggles the led
	//TCNT0 = 0x83;
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <timer0_init>:
		// do nothing
	}
}

void timer0_init(){
	TCCR0B |= (1<<CS01);	// pre-scaler = 8
  dc:	85 b5       	in	r24, 0x25	; 37
  de:	82 60       	ori	r24, 0x02	; 2
  e0:	85 bd       	out	0x25, r24	; 37
	//TCCR0B |= (1<<CS01)|(1<<CS00);	// pre-scaler = 8
	TCNT0 = 0x00;
  e2:	16 bc       	out	0x26, r1	; 38
  e4:	08 95       	ret

000000e6 <timer0_enaINT>:
}

void timer0_enaINT(){
	TIMSK0 |=(1<<TOIE0);			// initialize counter
  e6:	ee e6       	ldi	r30, 0x6E	; 110
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <main>:

void timer0_init();
void timer0_enaINT();

 int main(void){
	DDRB |= (1 << PORTB2);	// connect led to pin PB5
  f2:	22 9a       	sbi	0x04, 2	; 4
	timer0_init();			// initialize timer
  f4:	0e 94 6e 00 	call	0xdc	; 0xdc <timer0_init>
	timer0_enaINT();		// enable overflow interrupt
  f8:	0e 94 73 00 	call	0xe6	; 0xe6 <timer0_enaINT>
	sei();
  fc:	78 94       	sei
  fe:	ff cf       	rjmp	.-2      	; 0xfe <main+0xc>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
