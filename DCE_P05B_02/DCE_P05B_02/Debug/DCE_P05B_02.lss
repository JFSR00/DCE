
DCE_P05B_02.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000210  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ba0  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f0  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000583  00000000  00000000  00001824  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000476  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000375  00000000  00000000  00002346  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000026bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e1       	ldi	r30, 0x10	; 16
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6d 00 	call	0xda	; 0xda <main>
  8e:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <initADC>:
	ADCSRA = 0xcf;	// Habilitamos el ADC, activamos interrupciones, configuramos
	// el divisor de reloj a 128
}

inline void readADC(){
	ADCSRA |= (1<<ADSC);
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
  9c:	8f ec       	ldi	r24, 0xCF	; 207
  9e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  a2:	08 95       	ret

000000a4 <funADC>:
}

inline uint16_t funADC(uint8_t input) {	// Por motivos aun desconocidos, esta función no funciona
	ADMUX = 0x00;					// Reseteamos los registros del ADC
  a4:	ac e7       	ldi	r26, 0x7C	; 124
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	1c 92       	st	X, r1
	ADCSRA = 0x00;
  aa:	ea e7       	ldi	r30, 0x7A	; 122
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1

	ADMUX = 0x40 | (input & 0x0f);	// Usamos AVCC, ADLAR = 0, usamos ADCn especificado por el parámetro
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	8c 93       	st	X, r24
	ADCSRA = 0x87;					// Habilitamos el ADC, configuramos el divisor de reloj a 128
  b6:	87 e8       	ldi	r24, 0x87	; 135
  b8:	80 83       	st	Z, r24
	
	ADCSRA |= (1<<ADSC);			// Iniciamos lectura de ADC
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24
	while(!(ADCSRA&(1<<ADIF)));		// Esperamos hasta que termine la lectura del ADC
  c0:	80 81       	ld	r24, Z
  c2:	84 ff       	sbrs	r24, 4
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <funADC+0x1c>
	ADCSRA |= (1<<ADIF);			// Limpiamos el flag de fin de lectura
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 61       	ori	r24, 0x10	; 16
  ce:	80 83       	st	Z, r24

	return ADC;
  d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  d8:	08 95       	ret

000000da <main>:
#define ADC_PORT 0x00

static inline void initPorts();	// Función de inicialización de puertos

int main(void)
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	00 d0       	rcall	.+0      	; 0xe0 <main+0x6>
  e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x8>
  e2:	1f 92       	push	r1
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
	}
}

static inline void initPorts(){
	// Configuracion de los LEDs
	DDRB |= (1<<PORTB0) | (1<<PORTB5);
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	81 62       	ori	r24, 0x21	; 33
  ec:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<PORTB0)|(1<<PORTB5));
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8e 7d       	andi	r24, 0xDE	; 222
  f2:	85 b9       	out	0x05, r24	; 5
	// Configuracion del pulsador
	DDRD &= ~(1<<PORTD2);
  f4:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PORTD2);
  f6:	5a 9a       	sbi	0x0b, 2	; 11
	uint8_t i = 0;
	uint8_t buff[5];
	uint16_t media = 0;
	
	initPorts();
	initADC();
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <initADC>
	USART_Init(MYUBRR);
  fc:	87 e6       	ldi	r24, 0x67	; 103
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 b1 00 	call	0x162	; 0x162 <USART_Init>
	it  is recommendable to discard the first one. Besides, taking several readouts and average them,
	gives  you  a more  accuracy  measure.  (It  is more  optimal  to  take  2^n  readout  to average
	by means of shift operations instead of a division).
	*/
	
	funADC(ADC_PORT);
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	0e 94 52 00 	call	0xa4	; 0xa4 <funADC>
#define ADC_PORT 0x00

static inline void initPorts();	// Función de inicialización de puertos

int main(void)
{
 10a:	18 e0       	ldi	r17, 0x08	; 8
	*/
	
	funADC(ADC_PORT);
	
	while(1){
		media = 0;
 10c:	e1 2c       	mov	r14, r1
 10e:	f1 2c       	mov	r15, r1
		for(i = 0; i < 8; i++){
			media += funADC(ADC_PORT);
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 52 00 	call	0xa4	; 0xa4 <funADC>
 116:	e8 0e       	add	r14, r24
 118:	f9 1e       	adc	r15, r25
 11a:	11 50       	subi	r17, 0x01	; 1
	
	funADC(ADC_PORT);
	
	while(1){
		media = 0;
		for(i = 0; i < 8; i++){
 11c:	c9 f7       	brne	.-14     	; 0x110 <main+0x36>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__utoa_ncheck (unsigned int, char *, unsigned char);
	return __utoa_ncheck (__val, __s, __radix);
 11e:	4a e0       	ldi	r20, 0x0A	; 10
 120:	be 01       	movw	r22, r28
 122:	6f 5f       	subi	r22, 0xFF	; 255
 124:	7f 4f       	sbci	r23, 0xFF	; 255
 126:	c7 01       	movw	r24, r14
 128:	96 95       	lsr	r25
 12a:	87 95       	ror	r24
 12c:	96 95       	lsr	r25
 12e:	87 95       	ror	r24
 130:	96 95       	lsr	r25
 132:	87 95       	ror	r24
 134:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__utoa_ncheck>
			media += funADC(ADC_PORT);
		}
		media = (media >> 3);
		
		utoa(media, (char*)buff, 10);
		USART_TransmitStr("    \r");
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_TransmitStr>
		USART_TransmitStr(buff);
 140:	ce 01       	movw	r24, r28
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_TransmitStr>
		USART_Transmit_Char('\r');
 148:	8d e0       	ldi	r24, 0x0D	; 13
 14a:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_Transmit_Char>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	2f ef       	ldi	r18, 0xFF	; 255
 150:	89 e6       	ldi	r24, 0x69	; 105
 152:	98 e1       	ldi	r25, 0x18	; 24
 154:	21 50       	subi	r18, 0x01	; 1
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	90 40       	sbci	r25, 0x00	; 0
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x7a>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x84>
 15e:	00 00       	nop
 160:	d4 cf       	rjmp	.-88     	; 0x10a <main+0x30>

00000162 <USART_Init>:
	while(size){
		USART_Transmit_Char(*data);
		data++;
		size--;
	}
}
 162:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 166:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 16a:	e0 ec       	ldi	r30, 0xC0	; 192
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	8d 7f       	andi	r24, 0xFD	; 253
 172:	80 83       	st	Z, r24
 174:	e1 ec       	ldi	r30, 0xC1	; 193
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 61       	ori	r24, 0x18	; 24
 17c:	80 83       	st	Z, r24
 17e:	e2 ec       	ldi	r30, 0xC2	; 194
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	86 60       	ori	r24, 0x06	; 6
 186:	80 83       	st	Z, r24
 188:	08 95       	ret

0000018a <USART_Transmit_Char>:
 18a:	e0 ec       	ldi	r30, 0xC0	; 192
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	90 81       	ld	r25, Z
 190:	95 ff       	sbrs	r25, 5
 192:	fd cf       	rjmp	.-6      	; 0x18e <USART_Transmit_Char+0x4>
 194:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 198:	08 95       	ret

0000019a <USART_TransmitStr>:

void USART_TransmitStr(char *str){
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	ec 01       	movw	r28, r24
	while(*str){
 1a0:	88 81       	ld	r24, Y
 1a2:	88 23       	and	r24, r24
 1a4:	31 f0       	breq	.+12     	; 0x1b2 <USART_TransmitStr+0x18>
 1a6:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit_Char((uint8_t)*str);
 1a8:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_Transmit_Char>
		size--;
	}
}

void USART_TransmitStr(char *str){
	while(*str){
 1ac:	89 91       	ld	r24, Y+
 1ae:	81 11       	cpse	r24, r1
 1b0:	fb cf       	rjmp	.-10     	; 0x1a8 <USART_TransmitStr+0xe>
		USART_Transmit_Char((uint8_t)*str);
		str++;
	}
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <__utoa_ncheck>:
 1b8:	bb 27       	eor	r27, r27

000001ba <__utoa_common>:
 1ba:	fb 01       	movw	r30, r22
 1bc:	55 27       	eor	r21, r21
 1be:	aa 27       	eor	r26, r26
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	aa 1f       	adc	r26, r26
 1c6:	a4 17       	cp	r26, r20
 1c8:	10 f0       	brcs	.+4      	; 0x1ce <__utoa_common+0x14>
 1ca:	a4 1b       	sub	r26, r20
 1cc:	83 95       	inc	r24
 1ce:	50 51       	subi	r21, 0x10	; 16
 1d0:	b9 f7       	brne	.-18     	; 0x1c0 <__utoa_common+0x6>
 1d2:	a0 5d       	subi	r26, 0xD0	; 208
 1d4:	aa 33       	cpi	r26, 0x3A	; 58
 1d6:	08 f0       	brcs	.+2      	; 0x1da <__utoa_common+0x20>
 1d8:	a9 5d       	subi	r26, 0xD9	; 217
 1da:	a1 93       	st	Z+, r26
 1dc:	00 97       	sbiw	r24, 0x00	; 0
 1de:	79 f7       	brne	.-34     	; 0x1be <__utoa_common+0x4>
 1e0:	b1 11       	cpse	r27, r1
 1e2:	b1 93       	st	Z+, r27
 1e4:	11 92       	st	Z+, r1
 1e6:	cb 01       	movw	r24, r22
 1e8:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <strrev>

000001ec <strrev>:
 1ec:	dc 01       	movw	r26, r24
 1ee:	fc 01       	movw	r30, r24
 1f0:	67 2f       	mov	r22, r23
 1f2:	71 91       	ld	r23, Z+
 1f4:	77 23       	and	r23, r23
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <strrev+0x4>
 1f8:	32 97       	sbiw	r30, 0x02	; 2
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <strrev+0x18>
 1fc:	7c 91       	ld	r23, X
 1fe:	6d 93       	st	X+, r22
 200:	70 83       	st	Z, r23
 202:	62 91       	ld	r22, -Z
 204:	ae 17       	cp	r26, r30
 206:	bf 07       	cpc	r27, r31
 208:	c8 f3       	brcs	.-14     	; 0x1fc <strrev+0x10>
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
