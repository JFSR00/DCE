
DCE_P05_03.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000725  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000655  00000000  00000000  000009a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000272  00000000  00000000  00000ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  0000126c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000388  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000016f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  88:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_21>:
static inline void initADC();

volatile uint16_t res;
volatile uint16_t set_point;

ISR(ADC_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	res = ADC;
  9e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
  a2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
  a6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <res+0x1>
  aa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <res>
}
  ae:	9f 91       	pop	r25
  b0:	8f 91       	pop	r24
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <__vector_1>:

ISR(INT0_vect){
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	8f 93       	push	r24
  c8:	9f 93       	push	r25
	set_point += DEF_STEP;
  ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  d2:	8c 59       	subi	r24, 0x9C	; 156
  d4:	9f 4f       	sbci	r25, 0xFF	; 255
  d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	set_point &= 0x03ff;	// De esta manera nos aseguramos que nunca sera
  de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  e6:	93 70       	andi	r25, 0x03	; 3
  e8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	// mayor de 1023
}
  f0:	9f 91       	pop	r25
  f2:	8f 91       	pop	r24
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <main>:

int main(){
	//-----------Local variables --------------------------
	res = 0;
  fe:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <res+0x1>
 102:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <res>
	set_point = DEF_POINT;
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

//-----------Functions--------------------------

static inline void initPorts(){
	// Configuracion de los LEDs
	DDRB |= (1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3);
 112:	84 b1       	in	r24, 0x04	; 4
 114:	8f 60       	ori	r24, 0x0F	; 15
 116:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2)|(1<<PORTB3));
 118:	85 b1       	in	r24, 0x05	; 5
 11a:	80 7f       	andi	r24, 0xF0	; 240
 11c:	85 b9       	out	0x05, r24	; 5
	// Configuracion del pulsador
	DDRD &= ~(1<<PORTD2);
 11e:	52 98       	cbi	0x0a, 2	; 10
	PORTD |= (1<<PORTD2);
 120:	5a 9a       	sbi	0x0b, 2	; 11
}

static inline void initINT0(){
	EICRA|=(1<<ISC01);		// INT0-Falling edge
 122:	e9 e6       	ldi	r30, 0x69	; 105
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	80 83       	st	Z, r24
	EIMSK|=(1<<INT0);		// Enable INT0;
 12c:	e8 9a       	sbi	0x1d, 0	; 29
}

static inline void initADC(){
	ADMUX = 0x41;	// Usamos AVCC, ADLAR = 0 y usamos ADC1
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = 0xcf;	// Habilitamos el ADC, activamos interrupciones, configuramos
 134:	8f ec       	ldi	r24, 0xCF	; 207
 136:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	
	//-----------SETUP-------------------------------------
	initPorts();
	initINT0();
	initADC();
	sei();
 13a:	78 94       	sei
	
	//-----------LOOP-------------------------------------
	while(1){
		ADCSRA |= (1<<ADSC);
 13c:	ea e7       	ldi	r30, 0x7A	; 122
 13e:	f0 e0       	ldi	r31, 0x00	; 0
		if(res >= set_point){
			PORTB = 0x0f;
 140:	4f e0       	ldi	r20, 0x0F	; 15
	initADC();
	sei();
	
	//-----------LOOP-------------------------------------
	while(1){
		ADCSRA |= (1<<ADSC);
 142:	80 81       	ld	r24, Z
 144:	80 64       	ori	r24, 0x40	; 64
 146:	80 83       	st	Z, r24
		if(res >= set_point){
 148:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <res>
 14c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <res+0x1>
 150:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 154:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 158:	28 17       	cp	r18, r24
 15a:	39 07       	cpc	r19, r25
 15c:	10 f0       	brcs	.+4      	; 0x162 <main+0x64>
			PORTB = 0x0f;
 15e:	45 b9       	out	0x05, r20	; 5
 160:	f0 cf       	rjmp	.-32     	; 0x142 <main+0x44>
			}else{
			PORTB = 0x00;
 162:	15 b8       	out	0x05, r1	; 5
 164:	ee cf       	rjmp	.-36     	; 0x142 <main+0x44>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
